(var commands {}
     help {}
     args (process.argv.slice 2)
     child-process (require "child_process"))
(namespace stool)

(def exec (cmd callback)
     (child-process.exec cmd, { encoding 'binary }
                         (#(err stdout stderr)
                           (when stdout (console.log stdout))
                           (when stderr (console.log stderr))
                           (console.log (if err 'failure 'success))
                           (when callback (callback err)))))

(def register (name command-help command)
     (set help name command-help)
     (set commands name (#(next)
                          (console.log (+ "\nExecuting "name":"))
                          (command next))))

(macro command (name help ...body)
       `(var @name (register @["\"" (output-formatter (transpile name)) "\""]
                             @help
                             (lambda @{ name name args ['next] body body }))))

(def perform (commands-to-perform)
     (unless (empty? commands-to-perform)
           (var command-name (first commands-to-perform)
                command-fn (get commands command-name))
           (if (function? command-fn)
               (command-fn (#> (perform (rest commands-to-perform))))
               (console.error ("no command " command-name)))))


(when (empty? args) (assign args ['default-command]))

(process.next-tick (#> (perform args)))

(command list "this list"
         (console.log ("Sibilant version " (meta ("\"" (sibilant.version) "\""))))
         (console.log "\nAvailable commands:")
         (each-key command commands
                   (unless (= 'default-command command)
                           (console.log (+ "\t" command "\t\t"
                                           (or (get help command) "")))))
         (next))

(macro sequence (sequence-name description sequence-array)
       (when (undefined? sequence-array)
             (assign sequence-array description
                     description undefined)) 

       (var quoted `(quote @sequence-array)
            arr (pipe quoted
                      (transpile)
                      (output-formatter)
                      (eval)))
       
       (default description ("\"" (arr.join " ") "\""))
       `(command @sequence-name @description (perform @quoted))) 


(command default-command 'list (commands.list next))
